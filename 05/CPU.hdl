// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
        Mux16(a=instruction, b=ALUout1, sel=instruction[15],out=Ain); 
        Mux(a=true,b=instruction[5],sel=instruction[15],out=loadA);
        ARegister(in=Ain,load=loadA,out=Aout1,out[0..14]=addressM);

        Mux(a=false,b=instruction[4],sel=instruction[15],out=loadD);
        DRegister(in=ALUout1,load=loadD,out=Dout); 

        Mux16(a=Aout1, b=inM, sel=instruction[12],out=AMuxout);

        ALU(x=Dout,y=AMuxout,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout1,out=outM,zr=zr,ng=ng,out[15]=ALUout2); 

        Mux(a=false,b=true,sel=instruction[3],out=tempwriteM);
        Mux(a=false,b=tempwriteM,sel=instruction[15],out=writeM);

        Or16Way(in=ALUout1,out=JNE); 
        Not(in=JNE,out=JEQ);
        DMux(in=true,sel=ALUout2,a=JGTtemp,b=JLT);
        And(a=JGTtemp,b=JNE,out=JGT);
        Or(a=JGT,b=JEQ,out=JGE);
        Or(a=JLT,b=JEQ,out=JLE);

        Mux8Way(a=false,b=JGT,c=JEQ,d=JGE,e=JLT,f=JNE,g=JLE,h=true,sel=instruction[0..2],out=jmptemp); 

        Mux(a=false,b=jmptemp,sel=instruction[15],out=jmp); 

        Mux16(a=Aout1,b=false,sel=reset,out=pcin);
        Mux(a=jmp,b=true,sel=reset,out=pcload);

        PC(in=pcin,load=pcload,inc=true,out[0..14]=pc);
}